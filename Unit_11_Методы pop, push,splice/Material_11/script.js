const a = [1, 2, 3, 4, 5, 6, 7, 8, 9];
const b = ['a', 'b', 'c', 'd', 'e', 'f'];

// метод push - добавляет один или более элементов в конец массива и возвращает новую длину массива.

console.log(a.length); // length массива  - это номер последнего элемента массива +1, н-р - 8+1=9
console.log(a.push(10, 11, 44, 55, 66, 77)); // методом push добавляем  элементы в конец массива и выводим новую длину массива
// let c = a.push(10);
// console.log(c);
console.log(a); // вывод самого массива

b.push('j', 'e');
console.log(b);


// метод pop - удаляет последний элемент из массива и возвращает его значение.

console.log(b);
// b.pop(); // удаление последнего элемента массива
// b.pop(); // удаление последнего элемента массива от удаленного ранее
console.log(b.pop()); // удаление последнего элемента массива с выведением его в консоль
console.log(b.pop()); // удаление последнего элемента массива от удаленного ранее с выведением его в консоль
console.log(b);


// удалить элемент внутри массива

delete a[3]; // с помощью delete удаляем конкретный элемент массива, но не влияем на длину массива
console.log(a); //  вывод в массив с удаленным элементом, обозначенным empty


// метод splice() - изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые.

a.splice(3, 4, 'hi'); // метод splice удаляет третий элемент из массива и справа от него еще три элемента, и добавляет строку 'hi' на 3 место массива
// иначе говоря первый индекс выбирает расположение элемента, а второй индекс сколько справа удалять элементов, начиная с выбранного элемента.
//  в данном случае - третий элемент и 4 элемента, включая его самого, справа от него из асчета, что массив - это 0, 1, 2, 3 и т.д.  
console.log(a);


// метод shift() удаляет первый элемент из массива и возвращает его значение. Этот метод изменяет длину массива.

console.log(a.shift()); // метод shift - удаляет первый элемент массива и изменяет длину массива на минус один элемент

// метод unshift() добавляет один или более элементов в начало массива и возвращает новую длину массива.

console.log(a.unshift(88)); // метод unshift - добавляет первый элемент массива и изменяет длину массива на плюс один элемент

// Метод reverse - изменяет исходный массив (он станет перевернутым) и возвращает также перевернутый массив (можно пользоваться и так, и так).

console.log(a.reverse());

//  Метод indexOf осуществляет поиск значения в массиве. Если значение не найдено, то вернет -1, если найдено, то будет найдена его позиция в массиве 

const a10 = [9, 8, 7, 5]

console.log(a10.indexOf(4)); // вывод -1, потому что такого элемента в массиве нет.
console.log(a10.indexOf(7)); // вывод 2 - это индекс массива 0, 1, 2, 3

// задача на присутствие элемента в массиве

if (a10.indexOf(7) !== -1) {
    console.log('yes');
}
else {
    console.log('no');
}

const c = ['Hi', 'hello'];
console.log(c.indexOf('Hi')); // в console выводит индекс 0, потому что стоит в массиве, в самом начале


const a11 = [3, 8, 7, 5, 3, 5, 2];

console.log(a11.indexOf(2)); // выводим индекс 6
console.log(a11.indexOf(5)); // выводим индекс 3, хоть и расположено в 3 и 5
console.table(a11);
console.log(a11.indexOf(5, 4)); // можно указывать диапазон поиска, в данном случае находит индекс 5, потому что поиск начался с 4 и ищем ЗНАЧЕНИЕ индекса 5
console.log(a11.indexOf(3)); // выводим 0, потому что 3 присвоена индексу 0 в нашем массиве
console.log(a11.indexOf(3, -2)); // выводит отсутствие данного значения, т.е. -1
console.log(a11.indexOf(3, -8)); // выводит 0

//  arr.indexOf(searchElement[, fromIndex = 0]) 
//  если индекс больше или равен длине массива, возвращается -1, что означает, что массив даже не просматривается.
//  если индекс отрицателен, массив всё равно просматривается от начала к концу. Если рассчитанный индекс оказывается меньше 0, поиск ведётся по всему массиву. 
//  значение по умолчанию равно 0, что означает, что просматривается весь массив.





// эмуляция работы indexOf, начинаем с перебора массива (возможность перебора, как значения, так и самих индексов)

const a12 = [3, 8, 7, 5, 3, 5, 2];

function indexOfEmul(a12, item, from = 0) {

    for (let i = from; i < a12.length; i++) {
        if (a12[i] === item) {
            return i;
        }
    }
    return -1;
}

console.log(indexOfEmul(a12, 5, 4));




// Task 6
// Напишите функцию f6, которая эмулирует работу метода push применительно к массиву d6. 
// Т.е. добавляет значение из i-6 как последний элемент в массив d6. Эмуляция, значит, что мы получим результат аналогичный методу push без применения его. 
// Эмуляция заключается в присвоение значения как последнего элемента массива. Как вычислить индекс последнего элемента используя длину массива - вы знаете из предыдущего урока. 
// Повторный запуск функции должен также приводить к добавлению элемента.
// Во всех задачах где говорим второй, третий и т.д. имеем ввиду индекс
// Вывод - по нажатию кнопки b-6
// Вывод в out-6

let d6 = ['test', 5, 12];
let input6 = document.querySelector('.i-6').value;
let out6 = document.querySelector('.out-6');

function f6() {
    d6[d6.length] = input6;
    console.log(d6);
    showArr('.out-6', d6);
}

document.querySelector('.b-6').onclick = f6;


// Task 8
// Напишите функцию f8, которая эмулирует работу метода unShift - добавляем значение из i-8 в начало массива d8.
// Во всех задачах где говорим второй, третий и т.д. имеем ввиду индекс
// Вывод - по нажатию кнопки b-8
// Вывод в out-8

let d8 = [2, '4', 12, 67, 'hello'];
let input8 = document.querySelector('.i-8').value;
let out8 = document.querySelector('.out-8');

function f8() {
    let a = [];
    for (let i = 0; i < d8.length; i++) {
        a[0] = input8;
        a[i + 1] = d8[i];
    }
    d8 = a;
    console.log(d8);
    showArr('.out-8', d8);
}


// Task 9
// Напишите функцию f9, которая эмулирует работу метода shift - на примере массива d9.
// Во всех задачах где говорим второй, третий и т.д. имеем ввиду индекс
// Вывод - по нажатию кнопки b-9
// Вывод в out-9

let d9 = [100, 200, 300, 400, 700, 121];
let out9 = document.querySelector('.out-9');

function f9() {
    let a = [];
    for (let i = 1; i < d9.length; i++) {
        a.push(d9[i]);
    }
    d9 = a;
    console.log(d9);
    showArr('.out-9', d9);
}

document.querySelector('.b-9').onclick = f9;